"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const koa_1 = __importDefault(require("koa"));
const koa_compose_1 = __importDefault(require("koa-compose"));
const grpc = require('@grpc/grpc-js');
const context = require('koa/lib/context');
class Application extends koa_1.default {
    constructor(options) {
        super(options);
        this.service = options.service;
        this.context = Object.create(context);
    }
    // @ts-ignore
    createContext(call, method) {
        const context = {
            path: '/' + method,
            originalUrl: '/' + method,
            method: 'GET',
        };
        const request = (context.request = Object.create(this.request));
        const response = (context.response = Object.create(this.response));
        context.app = request.app = response.app = this;
        context.req = request.req = response.req = { socket: call.call.stream.session.socket };
        context.res = request.res = response.res = { socket: call.call.stream.session.socket };
        request.ctx = response.ctx = context;
        request.response = response;
        response.request = request;
        // context.originalUrl = request.originalUrl = req.url;
        context.state = {};
        return context;
    }
    // @ts-ignore
    callback() {
        const fn = koa_compose_1.default(this.middleware);
        return Object.keys(this.service).reduce((impl, method) => {
            impl[method] = this.handleRequest(fn, method);
            return impl;
        }, {});
    }
    handleRequest(fnMiddleware, method) {
        return async (call, callback) => {
            const ctx = this.createContext(call, method);
            ctx.request = call.request;
            ctx.socket = call.call.stream.session.socket;
            ctx.ip = ctx.socket.remoteAddress || '';
            ctx.call = call;
            Object.defineProperty(ctx, 'body', {
                set(v) {
                    this.response = this._body = v;
                },
                get() {
                    return this._body;
                },
            });
            try {
                await fnMiddleware(ctx);
                if (ctx.body === undefined) {
                    return callback({ code: grpc.status.UNIMPLEMENTED, details: 'Not Found' }, null);
                }
                callback(null, ctx.body);
            }
            catch (err) {
                callback(err, null);
            }
        };
    }
    // @ts-ignore
    listen(...args) {
        const server = new grpc.Server();
        server.addService(this.service, this.callback());
        console.log(this.service);
        return server.bindAsync(...args, grpc.ServerCredentials.createInsecure(), () => {
            server.start();
        });
    }
}
exports.default = Application;
